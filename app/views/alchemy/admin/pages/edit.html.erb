<% content_for(:title) { @page.name } %>

<% content_for(:subnav_additions) do %>
  <label><%= _t('Active Pages') %> &raquo;</label>
  <% @locked_pages.each do |page| %>
  <% if @page == page %>
  <%= render partial: 'page_status' %>
  <% else %>
  <div class="subnavi_tab wide" id="locked_page_<%= page.id %>">
    <%= link_to alchemy.edit_admin_page_path(page) do %>
    <span class="page_name" title="<%= page.name %>">
      <%= truncate page.name, length: 15 %>
    </span>
    <% end %>
    <%= form_tag(alchemy.unlock_admin_page_path(page), remote: true) do %>
      <button class="icon_button small" title="<%= _t(:explain_unlocking) %>">
        <%= render_icon('close small') %>
      </button>
    <% end %>
  </div>
  <% end %>
  <% end %>
<% end %>

<% content_for(:toolbar) do %>
<div class="toolbar_buttons">
  <div class="button_with_label">
    <%= form_tag alchemy.unlock_admin_page_path(@page, redirect_to: @layoutpage ? alchemy.admin_layoutpages_path : alchemy.admin_pages_path), id: 'unlock_page_form' do %>
      <button class="icon_button" title="<%= _t(:explain_unlocking) %>" data-alchemy-hotkey="alt+x">
        <%= render_icon('close') %>
      </button>
      <label><%= _t(:unlock_page) %></label>
    <% end %>
  </div>
  <% unless @page.layoutpage? %>
  <div class="button_with_label">
    <%= form_tag alchemy.visit_admin_page_path(@page), id: 'visit_page_form' do %>
      <button class="icon_button" title="<%= _t('Visit page') %>">
        <%= render_icon('visit_page') %>
      </button>
      <label><%= _t("Visit page") %></label>
    <% end %>
  </div>
  <% end %>
  <div class="button_with_label">
    <%= link_to_overlay_window(
      render_icon('info'),
      alchemy.info_admin_page_path(@page),
      {
        title: _t(:page_infos),
        size: '480x320'
      },
      {
        class: 'icon_button',
        title: _t(:page_infos),
        'data-alchemy-hotkey' => 'alt+i'
      }
    ) %>
    <label><%= _t(:page_infos) %></label>
  </div>
  <div class="button_with_label">
    <%= link_to_overlay_window(
      render_icon('settings'),
      alchemy.configure_admin_page_path(@page),
      {
        title: _t(:edit_page_properties),
        size: @page.layoutpage? ? '410x150' : '410x650'
      },
      class: :icon_button,
      title: _t(:edit_page_properties),
      'data-alchemy-hotkey' => 'alt+e'
    ) %>
    <label><%= _t(:page_properties) %></label>
  </div>
  <% if configuration(:cache_pages) && !@page.layoutpage? %>
  <div class="button_with_label">
    <%= form_tag alchemy.publish_admin_page_path(@page), id: 'publish_page_form' do %>
      <button class="icon_button" title="<%= _t(:explain_publishing) %>">
        <%= render_icon('publish') %>
      </button>
      <label><%= _t("Publish page") %></label>
    <% end %>
  </div>
  <% end %>
  <div class="button_with_label">
    <%= select_tag('preview_size', preview_sizes_for_select, class: 'alchemy_selectbox medium') %>
    <label><%= _t(:preview_size) %></label>
  </div>
</div>
<div class="toolbar_buttons right">
  <div class="button_with_label" id="show_preview_window">
    <%= link_to(render_icon(:preview_window), '#', {
      onclick: "Alchemy.openPreviewWindow(); return false",
      title: _t('Show Preview Window'),
      class: :icon_button
    }) %>
    <label><%= _t('Show Preview Window') %></label>
  </div>
  <div class="button_with_label" id="show_element_window">
    <%= link_to(render_icon(:element_window), '#', {
      onclick: "Alchemy.openElementsWindow(); return false",
      title: _t('Show Elements Window'),
      class: :icon_button
    }) %>
    <label><%= _t('Show Elements Window') %></label>
  </div>
</div>
<% end %>

<% content_for :javascripts do %>
<script type="text/javascript" charset="utf-8">

  Alchemy.openPreviewWindow = function() {
    Alchemy.PreviewWindow.init('<%= admin_page_url(@page) %>', '<%= _t("Page Preview") %>');
  }

  Alchemy.openElementsWindow = function() {
    Alchemy.ElementsWindow.init('<%= alchemy.admin_elements_path(page_id: @page.id) %>', {
      texts: {
        title: '<%= _t("Elements") %>',
        dirtyTitle: '<%= _t("Warning!") %>',
        dirtyMessage: '<%= _t(:element_dirty_close_window_notice) %>',
        okLabel: '<%= _t("Yes") %>',
        cancelLabel: '<%= _t("No") %>'
      },
      toolbarButtons: [
        {
          title: '<%= _t("New Element") %>',
          label: '<%= _t("New Element") %>',
          hotkey: 'alt+n',
          iconClass: 'new_element',
          onClick: function() {
            Alchemy.openWindow('<%= alchemy.new_admin_element_path(page_id: @page.id) %>', {
              title: '<%= _t("New Element") %>',
              width: 320,
              height: 120
            });
          }
        },
        {
          title: '<%= _t("Clipboard") %>',
          label: '<%= _t("Show clipboard") %>',
          iconClass: 'clipboard<%= clipboard_empty?("elements") ? "" : " full" %>',
          buttonId: 'clipboard_button',
          onClick: function() {
            Alchemy.openWindow('<%= alchemy.admin_clipboard_path(remarkable_type: "elements") %>', {
              title :'<%= _t("Clipboard") %>',
              width: 380,
              height: 270
            });
          }
        },
        {
          title: '<%= _t("Show trash") %>',
          label: '<%= _t("Show trash") %>',
          iconClass: 'trash<%= trash_empty?("elements") ? "" : " full" %>',
          buttonId: 'element_trash_button',
          onClick: function() {
            Alchemy.TrashWindow.open(<%= @page.id %>, '<%= _t("Trash") %>');
          }
        }
      ]
    }, function() {
      Alchemy.ImageLoader('#element_area');
      Alchemy.SortableElements(<%= @page.id %>, '<%= form_authenticity_token %>');
      Alchemy.ElementEditors.init();
      Alchemy.SelectBox('.element_editor');
      Alchemy.Tinymce.init(<%= @page.richtext_contents_ids.to_json %>);
      jQuery('#cells').tabs().tabs('paging', { follow: true, followOnSelect: true } );
      Alchemy.ElementDirtyObserver('#element_area');
      if (window.location.hash) {
        $(window.location.hash).trigger('Alchemy.SelectElementEditor');
      }
    });
  }

  jQuery(function($) {
    $('#unlock_page_form, #visit_page_form, #publish_page_form').on('submit', function(event) {
      var not_dirty = Alchemy.checkPageDirtyness(this);
      if (!not_dirty) Alchemy.pleaseWaitOverlay(false);
      return not_dirty;
    });
    Alchemy.PageLeaveObserver();
    Alchemy.openElementsWindow();
    Alchemy.openPreviewWindow();

    $('#preview_size').bind('open.selectBoxIt', function (e) {
      $('#top_menu').css('z-index', 5000);
    });

    $('#preview_size').bind('blur.selectBoxIt', function (e) {
      $('#top_menu').css('z-index', 30);
    });

    Alchemy.PreviewWindow.currentWidth = Alchemy.PreviewWindow.currentWindow.dialog('widget').width();

    $('select#preview_size').on('change', function(e) {
      var width = this.value;
      if (this.value === 'auto') {
        width = Alchemy.PreviewWindow.currentWidth;
      }
      Alchemy.PreviewWindow.currentWindow.dialog('widget').css('width', width);
      Alchemy.PreviewWindow.currentWindow.dialog('moveToTop');
    });

    $(window).resize(function() {
      width = $(window).width() - 482;
      height = $(window).height() - 90;
      if (width < 240) {
        width = 240;
      }
      left = $(window).width() - 406;
      if (left < 316) {
        left = 316;
      }
      Alchemy.PreviewWindow.currentWindow.dialog('widget').css({
        width: width,
        height: height
      });
      Alchemy.ElementsWindow.currentWindow.dialog('widget').css({
        left: left,
        height: height
      });
    });
  });

</script>
<% end %>
