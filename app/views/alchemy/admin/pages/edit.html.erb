<% content_for(:title) { @page.name } -%>

<%- content_for(:subnav_additions) do -%>
  <label><%= t('Active Pages') %> &raquo;</label>
  <%- @locked_pages.each do |page| -%>
  <%- if @page == page -%>
  <%= render :partial => 'page_status' %>
  <%- else -%>
  <div class="subnavi_tab wide" id="locked_page_<%= page.id %>">
    <%= link_to alchemy.edit_admin_page_path(page) do %>
    <span class="page_name" title="<%= page.name %>">
      <%= truncate page.name, :length => 15 %>
    </span>
    <% end %>
    <%= form_tag(alchemy.unlock_admin_page_path(page), :remote => true) do %>
      <button class="icon_button small" title="<%= t('explain_unlocking') %>">
        <%= render_icon('close small') %>
      </button>
    <% end %>
  </div>
  <%- end -%>
  <%- end -%>
<%- end -%>

<%- content_for(:toolbar) do -%>
<div id="toolbar_buttons">
  <div class="button_with_label">
    <%= form_tag alchemy.unlock_admin_page_path(@page, :redirect_to => @layoutpage ? alchemy.admin_layoutpages_path : alchemy.admin_pages_path), :id => 'unlock_page_form' do %>
      <button class="icon_button" title="<%= t('explain_unlocking') %>">
        <%= render_icon('close') %>
      </button>
      <label><%= t("unlock_page") %></label>
    <% end %>
  </div>
  <%- unless @page.layoutpage? -%>
  <div class="button_with_label">
    <%= form_tag alchemy.visit_admin_page_path(@page), :id => 'visit_page_form' do %>
      <button class="icon_button" title="<%= t('Visit page') %>">
        <%= render_icon('visit_page') %>
      </button>
      <label><%= t("Visit page") %></label>
    <% end %>
  </div>
  <%- end -%>
  <div class="button_with_label">
    <%= link_to_overlay_window(
      render_icon('settings'),
      alchemy.configure_admin_page_path(@page),
      {
        :title => t('edit_page_properties'),
        :size => @page.layoutpage? ? '340x150' : '410x660'
      },
      :class => :icon_button,
      :title => t('edit_page_properties')
    ) -%>
    <label><%= t('page_properties') %></label>
  </div>
  <%- if configuration(:cache_pages) && !@page.layoutpage? -%>
  <div class="button_with_label">
    <%= form_tag alchemy.publish_admin_page_path(@page), :id => 'publish_page_form' do -%>
      <button class="icon_button" title="<%= t('explain_publishing') %>">
        <%= render_icon('publish') %>
      </button>
      <label><%= t("Publish page") %></label>
    <% end -%>
  </div>
  <%- end -%>
</div>
<div id="toolbar_buttons_right">
  <div class="button_with_label" id="show_preview_window">
    <%= link_to(render_icon(:preview_window), '#', {
      :onclick => "Alchemy.openPreviewWindow()",
      :title => t('Show Preview Window'),
      :class => :icon_button
    }) %>
    <label><%= t('Show Preview Window') %></label>
  </div>
  <div class="button_with_label" id="show_element_window">
    <%= link_to(render_icon(:element_window), '#', {
      :onclick => "Alchemy.openElementsWindow()",
      :title => t('Show Elements Window'),
      :class => :icon_button
    }) %>
    <label><%= t('Show Elements Window') %></label>
  </div>
</div>
<%- end -%>

<%- content_for :javascripts do -%>
<%= tinymce_javascript_tags %>
<script type="text/javascript" charset="utf-8">

  Alchemy.openPreviewWindow = function() {
    Alchemy.PreviewWindow.init('<%= admin_page_url(@page) %>', '<%= t("Page Preview") -%>');
  }

  Alchemy.openElementsWindow = function() {
    Alchemy.ElementsWindow.init('<%= alchemy.admin_elements_path(:page_id => @page.id) -%>', {
      texts: {
        title: '<%= t("Elements") -%>',
        dirtyTitle: '<%= t("Warning!") -%>',
        dirtyMessage: '<%= t(:element_dirty_close_window_notice) -%>',
        okLabel: '<%= t("Yes") -%>',
        cancelLabel: '<%= t("No") -%>'
      },
      toolbarButtons: [
        {
          title: '<%= t("New Element") -%>',
          label: '<%= t("New Element") -%>',
          iconClass: 'new_element',
          onClick: function() {
            Alchemy.openWindow(
              '<%= alchemy.new_admin_element_path(:page_id => @page.id) -%>',
              '<%= t("New Element") -%>',
              320,
              120,
              false,
              true,
              true
            );
          }
        },
        {
          title: '<%= t("Clipboard") -%>',
          label: '<%= t("Show clipboard") -%>',
          iconClass: 'clipboard<%= clipboard_empty?("elements") ? "" : " full" -%>',
          buttonId: 'clipboard_button',
          onClick: function() {
            Alchemy.openWindow(
              '<%= alchemy.admin_clipboard_path(:remarkable_type => "elements") -%>',
              '<%= t("Clipboard") -%>',
              380,
              270,
              false,
              true,
              true
            );
          }
        },
        {
          title: '<%= t("Show trash") -%>',
          label: '<%= t("Show trash") -%>',
          iconClass: 'trash<%= trash_empty?("elements") ? "" : " full" -%>',
          buttonId: 'element_trash_button',
          onClick: function() {
            Alchemy.openTrashWindow(<%= @page.id %>, '<%= t("Trash") -%>');
          }
        }
      ]
    }, function() {
      Alchemy.SortableElements(<%= @page.id %>, '<%= form_authenticity_token %>');
      Alchemy.ElementEditorSelector.init();
      Alchemy.SelectBox('.element_editor');
      Alchemy.Tinymce.init(function() {
        Alchemy.ElementDirtyObserver('#element_area');
      });
      if (Alchemy.Tinymce.customInits) {
        for (var i = Alchemy.Tinymce.customInits.length - 1; i >= 0; i--) {
          Alchemy.Tinymce.customInits[i].call();
        }
      }
      jQuery('#cells').tabs().tabs('paging', { follow: true, followOnSelect: true } );
    });
  }

  jQuery(document).ready(function($) {
    var texts = {
      title: '<%= t("Warning!") %>',
      message: '<%= t(:element_dirty_page_leave_warning) %>',
      okLabel: '<%= t("Yes") %>',
      cancelLabel: '<%= t("No") %>'
    };
    $('#unlock_page_form, #visit_page_form, #publish_page_form').on('submit', function(event) {
      var not_dirty = Alchemy.checkPageDirtyness(this, texts);
      if (!not_dirty) Alchemy.pleaseWaitOverlay(false);
      return not_dirty;
    });
    Alchemy.PageLeaveObserver(texts);
    Alchemy.openElementsWindow();
    Alchemy.openPreviewWindow();
  });

</script>
<%- end -%>
