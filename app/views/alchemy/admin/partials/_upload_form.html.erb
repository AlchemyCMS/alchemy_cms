<div class="info">
	<%= render_icon('info') %>
	<p><%= t('explain_upload.intro', :name => item_type) %>:</p>
	<ol>
		<li><%= t('explain_upload.step1', :name => item_type) %></li>
		<li><%= t('explain_upload.step2', :name => item_type) %>*</li>
		<li><%= t('explain_upload.step3') %></li>
	</ol>
	<small>*<%= t('explain_upload.footnote', :name => item_type) %></small>
</div>
<div id="swf_upload_container">
	<div id="spanButtonPlaceHolder">
		<p>
			<%= image_tag('alchemy/ajax_loader.gif', :style => 'width: 16px; height: 16px; top: 3px; position: relative') %>
			<%= t('Please wait. Flash速 is loading...') %>
		</p>
	</div>
	<a href="#" class="button no-spinner" onclick="swfu.cancelQueue(); return false" style="display: none">
		<%= t("swfupload.cancel_uploads") %>
	</a>
</div>
<%- if file_types.first == '*' -%>
<p><%= t('You may upload any file') %></p>
<%- else -%>
<p><%= t('You may upload files with following extensions', :file_types_description => file_types_description, :file_types => file_types.to_sentence) %>.</p>
<%- end -%>
<p style="margin-top: 8px" id="choose_alternative_uploader">
	<small>
		<%= raw t('If you have any problems using the Flash uploader you can switch to', :link => t('<a href="#" id="uploadswitcher">%{value}</a>', :value => t('regular method'))) %>
	</small>
</p>
<h2 id="swfUploadFlashError" style="display: none"><%= t('Could not load Adobe Flash速 Plugin!') %></h2>
<div id="alternativeUpload" style="display: none">
	<h2 id="flash_upload_error_explanation" style="display: none">
		<%= t('Error with the Flash速 Uploader!') %>
	</h2>
	<p><%= t('use_alternative_uploader_instead') %></p>
	<p>
		<%= file_field_tag('Filedata') %>
	</p>
	<p>
		<%= submit_tag t('upload'), :class => 'button' %>
	</p>
	<p>
		<small>
			<a href="#" id="switch_to_flash_uploader" class="underline">
				<%= t('Switch to Flash速 Uploader') %>
			</a>
		</small>
	</p>
</div>
<div id="SWFUploadStatus" style="display: none" class="info">
	<%= render_icon('info') %>
</div>
<div id="uploadProgressContainer"></div>

<%- post_params = {
	:query => params[:query] || '',
	:page => 1,
	:per_page => params[:per_page],
	:while_assigning => @while_assigning ? "true" : "false",
	:content_id => @content.blank? ? nil : @content.id,
	:element_id => @element.blank? ? nil : @element.id,
	:size => @size,
	:options => @options.to_param
}.delete_if { |k,v| v.nil? }.to_json -%>

<script type='text/javascript'>
	try {
		var swfu = new SWFUpload({
			flash_url: "<%= asset_path('swfupload/swfupload.swf') %>",
			flash9_url: "<%= asset_path('swfupload/swfupload.swf') %>",
			upload_url: '<%= new_asset_path_with_session_information(model_name) %>',
			post_params: <%= post_params.html_safe %>,
			file_size_limit: "<%= configuration(:uploader)[:file_size_limit] || 100 -%> MB",
			file_types: '<%= file_types.map{ |f| "*.#{f}" }.join(";") %>',
			file_types_description: "<%= file_types_description %>",
			file_upload_limit: <%= configuration(:uploader)[:upload_limit] || 50 -%>,
			file_queue_limit: 0,
			custom_settings: {
				language: "<%= ::I18n.locale || 'en' %>"
			},
			debug: false,
			button_image_url: "<%= image_path('alchemy/swfupload/browse_button.png') %>",
			button_width: "120",
			button_height: "25",
			button_placeholder_id: "spanButtonPlaceHolder",
			button_text: "<span class='swfButtonText'><%= t('browse') %></span>",
			button_text_style: '.swfButtonText {font-size: 11px; font-family: "Lucida Grande", Arial, sans-serif; text-align: center; color: #333333; height: 25px; padding-left: 8px; padding-right: 8px; padding-bottom: 3px; padding-top: 5px}',
			button_text_left_padding: 0,
			button_text_top_padding: 4,
			swfupload_load_failed_handler: function () {
				jQuery('#swf_upload_container').hide();
				jQuery('#choose_alternative_uploader').hide();
				jQuery('#switch_to_flash_uploader').hide();
				jQuery('#swfUploadFlashError').show();
				jQuery('#alternativeUpload').show();
			},
			swfupload_loaded_handler : Alchemy.SWFUpload.init,
			file_queued_handler : Alchemy.SWFUpload.fileQueued,
			file_queue_error_handler : Alchemy.SWFUpload.fileQueueError,
			file_dialog_complete_handler : Alchemy.SWFUpload.fileDialogComplete,
			upload_start_handler : Alchemy.SWFUpload.uploadStart,
			upload_progress_handler : Alchemy.SWFUpload.uploadProgress,
			upload_error_handler : Alchemy.SWFUpload.uploadError,
			upload_success_handler : Alchemy.SWFUpload.uploadSuccess,
			queue_complete_handler : Alchemy.SWFUpload.queueComplete
		});
		swfu.window_mode = "opaque";
	} catch(err) {
		Alchemy.debug(err);
		jQuery('#swf_upload_container').hide();
		jQuery('#choose_alternative_uploader').hide();
		jQuery('#alternativeUpload').show();
		jQuery('#flash_upload_error_explanation').show();
	};
	(function($) {
		$('#uploadswitcher').click(function() {
			$('#choose_alternative_uploader').hide();
			$('#alternativeUpload').show();
			$('object.swfupload').hide();
		});
		$('#switch_to_flash_uploader').click(function() {
			$('#choose_alternative_uploader').show();
			$('#alternativeUpload').hide();
			$('object.swfupload').show();
		});
	})(jQuery);
</script>
