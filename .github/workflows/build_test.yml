name: Build & Test

concurrency:
  group: test-${{ github.ref_name }}
  cancel-in-progress: ${{ github.ref_name != 'main' }}

on:
  push:
    branches:
      - main
      - 7.1-stable
      - 7.0-stable
      - 6.1-stable
  pull_request:

jobs:
  Build:
    uses: ./.github/workflows/build.yml

  RSpec:
    needs: Build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rails:
          - "7.0"
          - "7.1"
        ruby:
          - "3.0"
          - "3.1"
          - "3.2"
          - "3.3"
        database:
          - mysql
          - postgresql
          - mariadb
    env:
      DB: ${{ matrix.database }}
      DB_USER: alchemy_user
      DB_PASSWORD: password
      DB_HOST: "127.0.0.1"
      RAILS_ENV: test
      RAILS_VERSION: ${{ matrix.rails }}
      RUBY_YJIT_ENABLE: "1"
    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: alchemy_user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: alchemy_cms_dummy_test
        ports: ["5432:5432"]
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      mysql:
        image: mysql:latest
        ports: ["3306:3306"]
        env:
          MYSQL_USER: alchemy_user
          MYSQL_PASSWORD: password
          MYSQL_DATABASE: alchemy_cms_dummy_test
          MYSQL_ROOT_PASSWORD: password
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5
      mariadb:
        image: mariadb:latest
        ports: ["3307:3306"]
        env:
          MARIADB_USER: alchemy_user
          MARIADB_PASSWORD: password
          MARIADB_DATABASE: alchemy_cms_dummy_test
          MARIADB_ROOT_PASSWORD: password
        options: --health-cmd="mariadb-admin ping" --health-interval=10s --health-timeout=5s --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true
      - name: Restore apt cache
        id: apt-cache
        uses: actions/cache@v4
        with:
          path: /home/runner/apt/cache
          key: ${{ runner.os }}-apt-${{ matrix.database }}
          restore-keys: |
            ${{ runner.os }}-apt-
      - name: Install Postgres headers
        if: matrix.database == 'postgresql'
        run: |
          mkdir -p /home/runner/apt/cache
          sudo apt update -qq
          sudo apt install -qq --fix-missing libpq-dev -o dir::cache::archives="/home/runner/apt/cache"
          sudo chown -R runner /home/runner/apt/cache
      - name: Install MySQL headers
        if: matrix.database == 'mysql' || matrix.database == 'mariadb'
        run: |
          mkdir -p /home/runner/apt/cache
          sudo apt update -qq
          sudo apt install -qq --fix-missing libmysqlclient-dev -o dir::cache::archives="/home/runner/apt/cache"
          sudo chown -R runner /home/runner/apt/cache
      - name: Prepare database
        run: |
          bundle exec rake alchemy:spec:prepare
      - name: Run tests
        run: |
          bundle exec rspec
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: AlchemyCMS/alchemy_cms
          file: ./coverage/coverage.xml
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: Screenshots
          path: spec/dummy/tmp/screenshots

  Jest:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test
    steps:
      - uses: actions/checkout@v4
      - name: Restore node modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('./package.json') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install yarn
        run: yarn install
      - name: Run jest
        run: yarn jest --verbose
